// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// versions:
//  binapi-generator: v0.4.0-dev
//  VPP:              20.01-45~g7a071e370~b63
// source: /usr/share/vpp/api/core/af_packet.api.json

/*
Package af_packet contains generated code for VPP binary API defined by af_packet.api (version 2.0.0).

It consists of:
	  2 aliases
	  6 enums
	  8 messages
*/
package af_packet

import (
	"bytes"
	"context"
	"encoding/binary"
	"io"
	"math"
	"strconv"

	api "git.fd.io/govpp.git/api"
	codec "git.fd.io/govpp.git/codec"
	struc "github.com/lunixbochs/struc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2 // please upgrade the GoVPP api package

const (
	// ModuleName is the name of this module.
	ModuleName = "af_packet"
	// APIVersion is the API version of this module.
	APIVersion = "2.0.0"
	// VersionCrc is the CRC of this module.
	VersionCrc = 0xba745e20
)

// IfStatusFlags represents VPP binary API enum 'if_status_flags'.
type IfStatusFlags uint32

const (
	IF_STATUS_API_FLAG_ADMIN_UP IfStatusFlags = 1
	IF_STATUS_API_FLAG_LINK_UP  IfStatusFlags = 2
)

var (
	IfStatusFlags_name = map[uint32]string{
		1: "IF_STATUS_API_FLAG_ADMIN_UP",
		2: "IF_STATUS_API_FLAG_LINK_UP",
	}
	IfStatusFlags_value = map[string]uint32{
		"IF_STATUS_API_FLAG_ADMIN_UP": 1,
		"IF_STATUS_API_FLAG_LINK_UP":  2,
	}
)

func (x IfStatusFlags) String() string {
	s, ok := IfStatusFlags_name[uint32(x)]
	if ok {
		return s
	}
	return "IfStatusFlags(" + strconv.Itoa(int(x)) + ")"
}

// IfType represents VPP binary API enum 'if_type'.
type IfType uint32

const (
	IF_API_TYPE_HARDWARE IfType = 1
	IF_API_TYPE_SUB      IfType = 2
	IF_API_TYPE_P2P      IfType = 3
	IF_API_TYPE_PIPE     IfType = 4
)

var (
	IfType_name = map[uint32]string{
		1: "IF_API_TYPE_HARDWARE",
		2: "IF_API_TYPE_SUB",
		3: "IF_API_TYPE_P2P",
		4: "IF_API_TYPE_PIPE",
	}
	IfType_value = map[string]uint32{
		"IF_API_TYPE_HARDWARE": 1,
		"IF_API_TYPE_SUB":      2,
		"IF_API_TYPE_P2P":      3,
		"IF_API_TYPE_PIPE":     4,
	}
)

func (x IfType) String() string {
	s, ok := IfType_name[uint32(x)]
	if ok {
		return s
	}
	return "IfType(" + strconv.Itoa(int(x)) + ")"
}

// LinkDuplex represents VPP binary API enum 'link_duplex'.
type LinkDuplex uint32

const (
	LINK_DUPLEX_API_UNKNOWN LinkDuplex = 0
	LINK_DUPLEX_API_HALF    LinkDuplex = 1
	LINK_DUPLEX_API_FULL    LinkDuplex = 2
)

var (
	LinkDuplex_name = map[uint32]string{
		0: "LINK_DUPLEX_API_UNKNOWN",
		1: "LINK_DUPLEX_API_HALF",
		2: "LINK_DUPLEX_API_FULL",
	}
	LinkDuplex_value = map[string]uint32{
		"LINK_DUPLEX_API_UNKNOWN": 0,
		"LINK_DUPLEX_API_HALF":    1,
		"LINK_DUPLEX_API_FULL":    2,
	}
)

func (x LinkDuplex) String() string {
	s, ok := LinkDuplex_name[uint32(x)]
	if ok {
		return s
	}
	return "LinkDuplex(" + strconv.Itoa(int(x)) + ")"
}

// MtuProto represents VPP binary API enum 'mtu_proto'.
type MtuProto uint32

const (
	MTU_PROTO_API_L3   MtuProto = 1
	MTU_PROTO_API_IP4  MtuProto = 2
	MTU_PROTO_API_IP6  MtuProto = 3
	MTU_PROTO_API_MPLS MtuProto = 4
	MTU_PROTO_API_N    MtuProto = 5
)

var (
	MtuProto_name = map[uint32]string{
		1: "MTU_PROTO_API_L3",
		2: "MTU_PROTO_API_IP4",
		3: "MTU_PROTO_API_IP6",
		4: "MTU_PROTO_API_MPLS",
		5: "MTU_PROTO_API_N",
	}
	MtuProto_value = map[string]uint32{
		"MTU_PROTO_API_L3":   1,
		"MTU_PROTO_API_IP4":  2,
		"MTU_PROTO_API_IP6":  3,
		"MTU_PROTO_API_MPLS": 4,
		"MTU_PROTO_API_N":    5,
	}
)

func (x MtuProto) String() string {
	s, ok := MtuProto_name[uint32(x)]
	if ok {
		return s
	}
	return "MtuProto(" + strconv.Itoa(int(x)) + ")"
}

// RxMode represents VPP binary API enum 'rx_mode'.
type RxMode uint32

const (
	RX_MODE_API_UNKNOWN   RxMode = 0
	RX_MODE_API_POLLING   RxMode = 1
	RX_MODE_API_INTERRUPT RxMode = 2
	RX_MODE_API_ADAPTIVE  RxMode = 3
	RX_MODE_API_DEFAULT   RxMode = 4
)

var (
	RxMode_name = map[uint32]string{
		0: "RX_MODE_API_UNKNOWN",
		1: "RX_MODE_API_POLLING",
		2: "RX_MODE_API_INTERRUPT",
		3: "RX_MODE_API_ADAPTIVE",
		4: "RX_MODE_API_DEFAULT",
	}
	RxMode_value = map[string]uint32{
		"RX_MODE_API_UNKNOWN":   0,
		"RX_MODE_API_POLLING":   1,
		"RX_MODE_API_INTERRUPT": 2,
		"RX_MODE_API_ADAPTIVE":  3,
		"RX_MODE_API_DEFAULT":   4,
	}
)

func (x RxMode) String() string {
	s, ok := RxMode_name[uint32(x)]
	if ok {
		return s
	}
	return "RxMode(" + strconv.Itoa(int(x)) + ")"
}

// SubIfFlags represents VPP binary API enum 'sub_if_flags'.
type SubIfFlags uint32

const (
	SUB_IF_API_FLAG_NO_TAGS           SubIfFlags = 1
	SUB_IF_API_FLAG_ONE_TAG           SubIfFlags = 2
	SUB_IF_API_FLAG_TWO_TAGS          SubIfFlags = 4
	SUB_IF_API_FLAG_DOT1AD            SubIfFlags = 8
	SUB_IF_API_FLAG_EXACT_MATCH       SubIfFlags = 16
	SUB_IF_API_FLAG_DEFAULT           SubIfFlags = 32
	SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY SubIfFlags = 64
	SUB_IF_API_FLAG_INNER_VLAN_ID_ANY SubIfFlags = 128
	SUB_IF_API_FLAG_MASK_VNET         SubIfFlags = 254
	SUB_IF_API_FLAG_DOT1AH            SubIfFlags = 256
)

var (
	SubIfFlags_name = map[uint32]string{
		1:   "SUB_IF_API_FLAG_NO_TAGS",
		2:   "SUB_IF_API_FLAG_ONE_TAG",
		4:   "SUB_IF_API_FLAG_TWO_TAGS",
		8:   "SUB_IF_API_FLAG_DOT1AD",
		16:  "SUB_IF_API_FLAG_EXACT_MATCH",
		32:  "SUB_IF_API_FLAG_DEFAULT",
		64:  "SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY",
		128: "SUB_IF_API_FLAG_INNER_VLAN_ID_ANY",
		254: "SUB_IF_API_FLAG_MASK_VNET",
		256: "SUB_IF_API_FLAG_DOT1AH",
	}
	SubIfFlags_value = map[string]uint32{
		"SUB_IF_API_FLAG_NO_TAGS":           1,
		"SUB_IF_API_FLAG_ONE_TAG":           2,
		"SUB_IF_API_FLAG_TWO_TAGS":          4,
		"SUB_IF_API_FLAG_DOT1AD":            8,
		"SUB_IF_API_FLAG_EXACT_MATCH":       16,
		"SUB_IF_API_FLAG_DEFAULT":           32,
		"SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY": 64,
		"SUB_IF_API_FLAG_INNER_VLAN_ID_ANY": 128,
		"SUB_IF_API_FLAG_MASK_VNET":         254,
		"SUB_IF_API_FLAG_DOT1AH":            256,
	}
)

func (x SubIfFlags) String() string {
	s, ok := SubIfFlags_name[uint32(x)]
	if ok {
		return s
	}
	return "SubIfFlags(" + strconv.Itoa(int(x)) + ")"
}

// InterfaceIndex represents VPP binary API alias 'interface_index'.
type InterfaceIndex uint32

// MacAddress represents VPP binary API alias 'mac_address'.
type MacAddress [6]uint8

// AfPacketCreate represents VPP binary API message 'af_packet_create'.
type AfPacketCreate struct {
	HwAddr          MacAddress `binapi:"mac_address,name=hw_addr" json:"hw_addr,omitempty"`
	UseRandomHwAddr bool       `binapi:"bool,name=use_random_hw_addr" json:"use_random_hw_addr,omitempty"`
	HostIfName      string     `binapi:"string[64],name=host_if_name" json:"host_if_name,omitempty" struc:"[64]byte"`
}

func (m *AfPacketCreate) Reset()                        { *m = AfPacketCreate{} }
func (*AfPacketCreate) GetMessageName() string          { return "af_packet_create" }
func (*AfPacketCreate) GetCrcString() string            { return "a190415f" }
func (*AfPacketCreate) GetMessageType() api.MessageType { return api.RequestMessage }

func (m *AfPacketCreate) Size() int {
	if m == nil {
		return 0
	}
	var size int
	// field[1] m.HwAddr
	size += 6
	// field[1] m.UseRandomHwAddr
	size += 1
	// field[1] m.HostIfName
	size += 64
	return size
}
func (m *AfPacketCreate) Marshal(b []byte) ([]byte, error) {
	o := binary.BigEndian
	_ = o
	pos := 0
	_ = pos
	var buf []byte
	if b == nil {
		buf = make([]byte, m.Size())
	} else {
		buf = b
	}
	// field[1] m.HwAddr
	for i := 0; i < 6; i++ {
		var x uint8
		if i < len(m.HwAddr) {
			x = uint8(m.HwAddr[i])
		}
		buf[pos] = uint8(x)
		pos += 1
	}
	// field[1] m.UseRandomHwAddr
	if m.UseRandomHwAddr {
		buf[pos] = 1
	}
	pos += 1
	// field[1] m.HostIfName
	copy(buf[pos:pos+64], m.HostIfName)
	pos += 64
	return buf, nil
}
func (m *AfPacketCreate) Unmarshal(tmp []byte) error {
	o := binary.BigEndian
	_ = o
	pos := 0
	_ = pos
	// field[1] m.HwAddr
	for i := 0; i < len(m.HwAddr); i++ {
		m.HwAddr[i] = uint8(tmp[pos])
		pos += 1
	}
	// field[1] m.UseRandomHwAddr
	m.UseRandomHwAddr = tmp[pos] != 0
	pos += 1
	// field[1] m.HostIfName
	{
		nul := bytes.Index(tmp[pos:pos+64], []byte{0x00})
		m.HostIfName = codec.DecodeString(tmp[pos : pos+nul])
		pos += 64
	}
	return nil
}

// AfPacketCreateReply represents VPP binary API message 'af_packet_create_reply'.
type AfPacketCreateReply struct {
	Retval    int32          `binapi:"i32,name=retval" json:"retval,omitempty"`
	SwIfIndex InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
}

func (m *AfPacketCreateReply) Reset()                        { *m = AfPacketCreateReply{} }
func (*AfPacketCreateReply) GetMessageName() string          { return "af_packet_create_reply" }
func (*AfPacketCreateReply) GetCrcString() string            { return "5383d31f" }
func (*AfPacketCreateReply) GetMessageType() api.MessageType { return api.ReplyMessage }

func (m *AfPacketCreateReply) Size() int {
	if m == nil {
		return 0
	}
	var size int
	// field[1] m.Retval
	size += 4
	// field[1] m.SwIfIndex
	size += 4
	return size
}
func (m *AfPacketCreateReply) Marshal(b []byte) ([]byte, error) {
	o := binary.BigEndian
	_ = o
	pos := 0
	_ = pos
	var buf []byte
	if b == nil {
		buf = make([]byte, m.Size())
	} else {
		buf = b
	}
	// field[1] m.Retval
	o.PutUint32(buf[pos:pos+4], uint32(m.Retval))
	pos += 4
	// field[1] m.SwIfIndex
	o.PutUint32(buf[pos:pos+4], uint32(m.SwIfIndex))
	pos += 4
	return buf, nil
}
func (m *AfPacketCreateReply) Unmarshal(tmp []byte) error {
	o := binary.BigEndian
	_ = o
	pos := 0
	_ = pos
	// field[1] m.Retval
	m.Retval = int32(o.Uint32(tmp[pos : pos+4]))
	pos += 4
	// field[1] m.SwIfIndex
	m.SwIfIndex = InterfaceIndex(o.Uint32(tmp[pos : pos+4]))
	pos += 4
	return nil
}

// AfPacketDelete represents VPP binary API message 'af_packet_delete'.
type AfPacketDelete struct {
	HostIfName string `binapi:"string[64],name=host_if_name" json:"host_if_name,omitempty" struc:"[64]byte"`
}

func (m *AfPacketDelete) Reset()                        { *m = AfPacketDelete{} }
func (*AfPacketDelete) GetMessageName() string          { return "af_packet_delete" }
func (*AfPacketDelete) GetCrcString() string            { return "863fa648" }
func (*AfPacketDelete) GetMessageType() api.MessageType { return api.RequestMessage }

func (m *AfPacketDelete) Size() int {
	if m == nil {
		return 0
	}
	var size int
	// field[1] m.HostIfName
	size += 64
	return size
}
func (m *AfPacketDelete) Marshal(b []byte) ([]byte, error) {
	o := binary.BigEndian
	_ = o
	pos := 0
	_ = pos
	var buf []byte
	if b == nil {
		buf = make([]byte, m.Size())
	} else {
		buf = b
	}
	// field[1] m.HostIfName
	copy(buf[pos:pos+64], m.HostIfName)
	pos += 64
	return buf, nil
}
func (m *AfPacketDelete) Unmarshal(tmp []byte) error {
	o := binary.BigEndian
	_ = o
	pos := 0
	_ = pos
	// field[1] m.HostIfName
	{
		nul := bytes.Index(tmp[pos:pos+64], []byte{0x00})
		m.HostIfName = codec.DecodeString(tmp[pos : pos+nul])
		pos += 64
	}
	return nil
}

// AfPacketDeleteReply represents VPP binary API message 'af_packet_delete_reply'.
type AfPacketDeleteReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *AfPacketDeleteReply) Reset()                        { *m = AfPacketDeleteReply{} }
func (*AfPacketDeleteReply) GetMessageName() string          { return "af_packet_delete_reply" }
func (*AfPacketDeleteReply) GetCrcString() string            { return "e8d4e804" }
func (*AfPacketDeleteReply) GetMessageType() api.MessageType { return api.ReplyMessage }

func (m *AfPacketDeleteReply) Size() int {
	if m == nil {
		return 0
	}
	var size int
	// field[1] m.Retval
	size += 4
	return size
}
func (m *AfPacketDeleteReply) Marshal(b []byte) ([]byte, error) {
	o := binary.BigEndian
	_ = o
	pos := 0
	_ = pos
	var buf []byte
	if b == nil {
		buf = make([]byte, m.Size())
	} else {
		buf = b
	}
	// field[1] m.Retval
	o.PutUint32(buf[pos:pos+4], uint32(m.Retval))
	pos += 4
	return buf, nil
}
func (m *AfPacketDeleteReply) Unmarshal(tmp []byte) error {
	o := binary.BigEndian
	_ = o
	pos := 0
	_ = pos
	// field[1] m.Retval
	m.Retval = int32(o.Uint32(tmp[pos : pos+4]))
	pos += 4
	return nil
}

// AfPacketDetails represents VPP binary API message 'af_packet_details'.
type AfPacketDetails struct {
	SwIfIndex  InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	HostIfName string         `binapi:"string[64],name=host_if_name" json:"host_if_name,omitempty" struc:"[64]byte"`
}

func (m *AfPacketDetails) Reset()                        { *m = AfPacketDetails{} }
func (*AfPacketDetails) GetMessageName() string          { return "af_packet_details" }
func (*AfPacketDetails) GetCrcString() string            { return "58c7c042" }
func (*AfPacketDetails) GetMessageType() api.MessageType { return api.ReplyMessage }

func (m *AfPacketDetails) Size() int {
	if m == nil {
		return 0
	}
	var size int
	// field[1] m.SwIfIndex
	size += 4
	// field[1] m.HostIfName
	size += 64
	return size
}
func (m *AfPacketDetails) Marshal(b []byte) ([]byte, error) {
	o := binary.BigEndian
	_ = o
	pos := 0
	_ = pos
	var buf []byte
	if b == nil {
		buf = make([]byte, m.Size())
	} else {
		buf = b
	}
	// field[1] m.SwIfIndex
	o.PutUint32(buf[pos:pos+4], uint32(m.SwIfIndex))
	pos += 4
	// field[1] m.HostIfName
	copy(buf[pos:pos+64], m.HostIfName)
	pos += 64
	return buf, nil
}
func (m *AfPacketDetails) Unmarshal(tmp []byte) error {
	o := binary.BigEndian
	_ = o
	pos := 0
	_ = pos
	// field[1] m.SwIfIndex
	m.SwIfIndex = InterfaceIndex(o.Uint32(tmp[pos : pos+4]))
	pos += 4
	// field[1] m.HostIfName
	{
		nul := bytes.Index(tmp[pos:pos+64], []byte{0x00})
		m.HostIfName = codec.DecodeString(tmp[pos : pos+nul])
		pos += 64
	}
	return nil
}

// AfPacketDump represents VPP binary API message 'af_packet_dump'.
type AfPacketDump struct{}

func (m *AfPacketDump) Reset()                        { *m = AfPacketDump{} }
func (*AfPacketDump) GetMessageName() string          { return "af_packet_dump" }
func (*AfPacketDump) GetCrcString() string            { return "51077d14" }
func (*AfPacketDump) GetMessageType() api.MessageType { return api.RequestMessage }

func (m *AfPacketDump) Size() int {
	if m == nil {
		return 0
	}
	var size int
	return size
}
func (m *AfPacketDump) Marshal(b []byte) ([]byte, error) {
	o := binary.BigEndian
	_ = o
	pos := 0
	_ = pos
	var buf []byte
	if b == nil {
		buf = make([]byte, m.Size())
	} else {
		buf = b
	}
	return buf, nil
}
func (m *AfPacketDump) Unmarshal(tmp []byte) error {
	o := binary.BigEndian
	_ = o
	pos := 0
	_ = pos
	return nil
}

// AfPacketSetL4CksumOffload represents VPP binary API message 'af_packet_set_l4_cksum_offload'.
type AfPacketSetL4CksumOffload struct {
	SwIfIndex InterfaceIndex `binapi:"interface_index,name=sw_if_index" json:"sw_if_index,omitempty"`
	Set       bool           `binapi:"bool,name=set" json:"set,omitempty"`
}

func (m *AfPacketSetL4CksumOffload) Reset()                        { *m = AfPacketSetL4CksumOffload{} }
func (*AfPacketSetL4CksumOffload) GetMessageName() string          { return "af_packet_set_l4_cksum_offload" }
func (*AfPacketSetL4CksumOffload) GetCrcString() string            { return "319cd5c8" }
func (*AfPacketSetL4CksumOffload) GetMessageType() api.MessageType { return api.RequestMessage }

func (m *AfPacketSetL4CksumOffload) Size() int {
	if m == nil {
		return 0
	}
	var size int
	// field[1] m.SwIfIndex
	size += 4
	// field[1] m.Set
	size += 1
	return size
}
func (m *AfPacketSetL4CksumOffload) Marshal(b []byte) ([]byte, error) {
	o := binary.BigEndian
	_ = o
	pos := 0
	_ = pos
	var buf []byte
	if b == nil {
		buf = make([]byte, m.Size())
	} else {
		buf = b
	}
	// field[1] m.SwIfIndex
	o.PutUint32(buf[pos:pos+4], uint32(m.SwIfIndex))
	pos += 4
	// field[1] m.Set
	if m.Set {
		buf[pos] = 1
	}
	pos += 1
	return buf, nil
}
func (m *AfPacketSetL4CksumOffload) Unmarshal(tmp []byte) error {
	o := binary.BigEndian
	_ = o
	pos := 0
	_ = pos
	// field[1] m.SwIfIndex
	m.SwIfIndex = InterfaceIndex(o.Uint32(tmp[pos : pos+4]))
	pos += 4
	// field[1] m.Set
	m.Set = tmp[pos] != 0
	pos += 1
	return nil
}

// AfPacketSetL4CksumOffloadReply represents VPP binary API message 'af_packet_set_l4_cksum_offload_reply'.
type AfPacketSetL4CksumOffloadReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *AfPacketSetL4CksumOffloadReply) Reset() { *m = AfPacketSetL4CksumOffloadReply{} }
func (*AfPacketSetL4CksumOffloadReply) GetMessageName() string {
	return "af_packet_set_l4_cksum_offload_reply"
}
func (*AfPacketSetL4CksumOffloadReply) GetCrcString() string            { return "e8d4e804" }
func (*AfPacketSetL4CksumOffloadReply) GetMessageType() api.MessageType { return api.ReplyMessage }

func (m *AfPacketSetL4CksumOffloadReply) Size() int {
	if m == nil {
		return 0
	}
	var size int
	// field[1] m.Retval
	size += 4
	return size
}
func (m *AfPacketSetL4CksumOffloadReply) Marshal(b []byte) ([]byte, error) {
	o := binary.BigEndian
	_ = o
	pos := 0
	_ = pos
	var buf []byte
	if b == nil {
		buf = make([]byte, m.Size())
	} else {
		buf = b
	}
	// field[1] m.Retval
	o.PutUint32(buf[pos:pos+4], uint32(m.Retval))
	pos += 4
	return buf, nil
}
func (m *AfPacketSetL4CksumOffloadReply) Unmarshal(tmp []byte) error {
	o := binary.BigEndian
	_ = o
	pos := 0
	_ = pos
	// field[1] m.Retval
	m.Retval = int32(o.Uint32(tmp[pos : pos+4]))
	pos += 4
	return nil
}

func init() { file_af_packet_binapi_init() }
func file_af_packet_binapi_init() {
	api.RegisterMessage((*AfPacketCreate)(nil), "af_packet.AfPacketCreate")
	api.RegisterMessage((*AfPacketCreateReply)(nil), "af_packet.AfPacketCreateReply")
	api.RegisterMessage((*AfPacketDelete)(nil), "af_packet.AfPacketDelete")
	api.RegisterMessage((*AfPacketDeleteReply)(nil), "af_packet.AfPacketDeleteReply")
	api.RegisterMessage((*AfPacketDetails)(nil), "af_packet.AfPacketDetails")
	api.RegisterMessage((*AfPacketDump)(nil), "af_packet.AfPacketDump")
	api.RegisterMessage((*AfPacketSetL4CksumOffload)(nil), "af_packet.AfPacketSetL4CksumOffload")
	api.RegisterMessage((*AfPacketSetL4CksumOffloadReply)(nil), "af_packet.AfPacketSetL4CksumOffloadReply")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*AfPacketCreate)(nil),
		(*AfPacketCreateReply)(nil),
		(*AfPacketDelete)(nil),
		(*AfPacketDeleteReply)(nil),
		(*AfPacketDetails)(nil),
		(*AfPacketDump)(nil),
		(*AfPacketSetL4CksumOffload)(nil),
		(*AfPacketSetL4CksumOffloadReply)(nil),
	}
}

// Reference imports to suppress errors if they are not otherwise used.
var _ = api.RegisterMessage
var _ = codec.DecodeString
var _ = bytes.NewBuffer
var _ = context.Background
var _ = io.Copy
var _ = strconv.Itoa
var _ = struc.Pack
var _ = binary.BigEndian
var _ = math.Float32bits
